//
//  MerchantHistoryView.swift
//  ReceiptsMVP
//
//  Created by Tilek Maralov on 18/9/25.
//

import SwiftUI
import SwiftData

struct MerchantHistoryView: View {
    let merchant: String
    let inn: String?

    @Environment(\.modelContext) private var modelContext
    @State private var receipts: [Receipt] = []
    @State private var isLoading = true
    @State private var errorMessage: String?

    private let twoFrac: FloatingPointFormatStyle<Double> = .number.precision(.fractionLength(2))

    var body: some View {
        List {
            // –°–≤–æ–¥–∫–∞
            if !receipts.isEmpty {
                Section {
                    HStack {
                        Text("–í—Å–µ–≥–æ —á–µ–∫–æ–≤")
                        Spacer()
                        Text("\(receipts.count)")
                            .fontWeight(.semibold)
                    }
                    HStack {
                        Text("–ò—Ç–æ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥")
                        Spacer()
                        Text(totalSum.doubleValue, format: twoFrac)
                            .fontWeight(.semibold)
                    }
                }
            }

            // –ò—Å—Ç–æ—Ä–∏—è: –ø–æ –∫–∞–∂–¥–æ–º—É —á–µ–∫—É ‚Äî ¬´–û—Ç–∫—Ä—ã—Ç—å —á–µ–∫¬ª + –ø–æ–∑–∏—Ü–∏–∏
            ForEach(receipts) { r in
                Section {
                    // üëâ –ö–Ω–æ–ø–∫–∞-–ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ—Ç–∞–ª—è–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–∫–∞
                    NavigationLink {
                        ReceiptDetailView(receipt: r)
                    } label: {
                        HStack {
                            Image(systemName: "doc.text.magnifyingglass")
                            Text("–û—Ç–∫—Ä—ã—Ç—å —á–µ–∫")
                            Spacer()
                            Text(r.total.doubleValue, format: .number.precision(.fractionLength(2)))
                                .foregroundStyle(.secondary)
                        }
                    }

                    // –ü–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if let items = decodeItems(r), !items.isEmpty {
                        ForEach(Array(items.enumerated()), id: \.offset) { _, it in
                            VStack(alignment: .leading, spacing: 4) {
                                Text(it.name).font(.subheadline)
                                Text("–ö–æ–ª-–≤–æ: \(it.qty.doubleValue, format: .number.precision(.fractionLength(2))) ¬∑ –°—É–º–º–∞: \(it.sum.doubleValue, format: .number.precision(.fractionLength(2)))")
                                    .font(.footnote)
                                    .foregroundStyle(.secondary)
                            }
                            .padding(.vertical, 2)
                        }
                    } else {
                        // –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∂–µ–º —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥
                        Text("–°—É–º–º–∞ —á–µ–∫–∞: \(r.total.doubleValue, format: .number.precision(.fractionLength(2)))")
                            .foregroundStyle(.secondary)
                    }
                } header: {
                    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ ‚Äî –¥–∞—Ç–∞ —á–µ–∫–∞
                    Text(r.date.formatted(date: .long, time: .shortened))
                } footer: {
                    Text("–ò—Ç–æ–≥–æ –ø–æ —á–µ–∫—É: \(r.total.doubleValue, format: .number.precision(.fractionLength(2)))")
                        .font(.footnote)
                        .foregroundStyle(.secondary)
                }
            }

        }
        .overlay {
            if isLoading {
                ProgressView("–ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é‚Ä¶")
            } else if let errorMessage {
                VStack(spacing: 8) {
                    Text(errorMessage).foregroundStyle(.secondary)
                    Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å") { Task { await load() } }
                }
            } else if receipts.isEmpty {
                ContentUnavailableView(
                    "–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫",
                    systemImage: "cart",
                    description: Text("–ü–æ–∫–∞ –Ω–µ—Ç —á–µ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞")
                )
            }
        }
        .navigationTitle(titleText)
        .task { await load() }
    }

    private var titleText: String {
        if let inn, !inn.isEmpty {
            return "\(merchant.isEmpty ? "–ü—Ä–æ–¥–∞–≤–µ—Ü" : merchant) ‚Äî –ò–ù–ù \(inn)"
        } else {
            return merchant.isEmpty ? "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫" : merchant
        }
    }

    private var totalSum: Decimal {
        receipts.reduce(0) { $0 + $1.total }
    }

    private func decodeItems(_ r: Receipt) -> [ParsedItem]? {
        guard let json = r.itemsJSON, let data = json.data(using: .utf8) else { return nil }
        return try? JSONDecoder().decode([ParsedItem].self, from: data)
    }

    @MainActor
    private func load() async {
        isLoading = true; defer { isLoading = false }
        do {
            if let inn, !inn.isEmpty {
                // ‚úÖ –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–µ–¥–∏–∫–∞—Ç–µ
                let descriptor = FetchDescriptor<Receipt>(
                    predicate: #Predicate { $0.inn == inn },
                    sortBy: [SortDescriptor(\.date, order: .reverse)]
                )
                receipts = try modelContext.fetch(descriptor)
            } else {
                // ‚ùóÔ∏è–ù–µ–ª—å–∑—è lowercased() –≤ –ø—Ä–µ–¥–∏–∫–∞—Ç–µ ‚Äî –±–µ—Ä—ë–º –≤—Å–µ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ –ø–∞–º—è—Ç–∏.
                let descriptor = FetchDescriptor<Receipt>(
                    sortBy: [SortDescriptor(\.date, order: .reverse)]
                )
                let all = try modelContext.fetch(descriptor)
                let target = merchant.trimmingCharacters(in: .whitespacesAndNewlines)
                receipts = all.filter { rec in
                    rec.merchant.compare(target, options: [.caseInsensitive, .diacriticInsensitive]) == .orderedSame
                }
            }
            errorMessage = nil
        } catch let err {
            errorMessage = err.localizedDescription
            receipts = []
        }
    }
}
